{"version":3,"file":"__output.js","sources":["stats.spec.ts"],"sourcesContent":["import { getStats } from '@snoka/runner/src/stats'\n\ndescribe('getStats()', () => {\n  test('no errors', () => {\n    const stats = getStats([\n      {\n        duration: 0,\n        filePath: '',\n        suites: [\n          {\n            id: '',\n            filePath: '',\n            title: '',\n            errors: 0,\n            tests: [\n              {\n                id: '',\n                title: '',\n                error: null,\n              },\n            ],\n          },\n          {\n            id: '',\n            filePath: '',\n            title: '',\n            errors: 0,\n            tests: [\n              {\n                id: '',\n                title: '',\n                error: null,\n              },\n              {\n                id: '',\n                title: '',\n                error: null,\n              },\n            ],\n          },\n        ],\n      },\n      {\n        duration: 0,\n        filePath: '',\n        suites: [\n          {\n            id: '',\n            filePath: '',\n            title: '',\n            errors: 0,\n            tests: [\n              {\n                id: '',\n                title: '',\n                error: null,\n              },\n            ],\n          },\n          {\n            id: '',\n            filePath: '',\n            title: '',\n            errors: 0,\n            tests: [\n              {\n                id: '',\n                title: '',\n                error: null,\n              },\n              {\n                id: '',\n                title: '',\n                error: null,\n              },\n            ],\n          },\n        ],\n      },\n    ])\n    expect(stats.suiteCount).to.eql(4)\n    expect(stats.errorSuiteCount).to.eql(0)\n    expect(stats.testCount).to.eql(6)\n    expect(stats.errorTestCount).to.eql(0)\n  })\n\n  test('counts errors', () => {\n    const stats = getStats([\n      {\n        duration: 0,\n        filePath: '',\n        suites: [\n          {\n            id: '',\n            filePath: '',\n            title: '',\n            errors: 0,\n            tests: [\n              {\n                id: '',\n                title: '',\n                error: null,\n              },\n            ],\n          },\n          {\n            id: '',\n            filePath: '',\n            title: '',\n            errors: 1,\n            tests: [\n              {\n                id: '',\n                title: '',\n                error: new Error(),\n              },\n              {\n                id: '',\n                title: '',\n                error: null,\n              },\n            ],\n          },\n        ],\n      },\n    ])\n    expect(stats.suiteCount).to.eql(2)\n    expect(stats.errorSuiteCount).to.eql(1)\n    expect(stats.testCount).to.eql(3)\n    expect(stats.errorTestCount).to.eql(1)\n  })\n})\n"],"names":["stats","getStats"],"mappings":"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"}