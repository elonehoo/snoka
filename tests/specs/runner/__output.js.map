{"version":3,"file":"__output.js","sources":["../../../packages/runner/src/build.ts","build.spec.ts"],"sourcesContent":["import esbuild from 'rollup-plugin-esbuild'\nimport { rollup } from 'rollup'\nimport fs from 'fs'\nimport { fs as memfs } from 'memfs'\nimport { ufs } from 'unionfs'\nimport { patchFs, patchRequire } from 'fs-monkey'\nimport { dirname, join, relative } from 'path'\nimport { workerEmit } from '@akryum/workerpool'\nimport { Context, EventType } from './types'\n\nconst originalFs = { ...fs }\nlet mockedFs = false\n\nexport function mockFileSystem () {\n  if (mockedFs) return\n  mockedFs = true\n  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n  // @ts-ignore\n  ufs.use(originalFs).use(memfs)\n  // Patch unionfs to write to memfs only\n  Object.assign(ufs, {\n    unwatchFile: originalFs.unwatchFile,\n    mkdir: memfs.mkdir,\n    mkdirSync: memfs.mkdirSync,\n    write: memfs.write,\n    writeFile: (path, ...args) => {\n      memfs.mkdirpSync(dirname(path))\n      // @ts-ignore\n      return memfs.writeFile(path, ...args)\n    },\n    writeFileSync: (path, ...args) => {\n      memfs.mkdirpSync(dirname(path))\n      // @ts-ignore\n      return memfs.writeFileSync(path, ...args)\n    },\n  })\n  patchFs(ufs)\n  patchRequire(ufs)\n}\n\nexport async function buildTestFile (ctx: Context) {\n  mockFileSystem()\n\n  const targetDir = dirname(ctx.options.entry)\n\n  try {\n    // Ensure target directory\n    memfs.mkdirSync(targetDir, { recursive: true })\n\n    // Rollup cache\n    const cachePath = getCachePath(ctx.options.entry)\n    const cache = loadBuildCache(ctx, cachePath)\n\n    workerEmit(EventType.BUILDING, {\n      testFilePath: ctx.options.entry,\n    })\n\n    const time = Date.now()\n    const bundle = await rollup({\n      input: ctx.options.entry,\n      plugins: [\n        esbuild({\n          tsconfig: join(process.cwd(), 'tsconfig.json'),\n          minify: false,\n        }),\n      ],\n      external: [\n        /node_modules/,\n      ],\n      cache,\n    })\n\n    saveBuildCache(ctx, cachePath, bundle.cache)\n\n    await bundle.write({\n      dir: targetDir,\n      entryFileNames: '__output.js',\n      format: 'cjs',\n      sourcemap: true,\n    })\n\n    await bundle.close()\n\n    workerEmit(EventType.BUILD_COMPLETED, {\n      testFilePath: ctx.options.entry,\n      duration: Date.now() - time,\n    })\n  } catch (e) {\n    workerEmit(EventType.BUILD_FAILED, {\n      testFilePath: ctx.options.entry,\n      error: e,\n    })\n    throw e\n  }\n}\n\nexport function getCachePath (filePath: string) {\n  const cacheKey = relative(process.cwd(), filePath).replace(/(\\/|\\.)/g, '_')\n  return join(process.cwd(), 'node_modules', '.temp', 'peeky-build-cache', cacheKey + '.json')\n}\n\nexport function loadBuildCache (ctx: Context, cachePath: string) {\n  let cache\n  if (fs.existsSync(cachePath)) {\n    try {\n      cache = JSON.parse(fs.readFileSync(cachePath, 'utf8'))\n    } catch (e) {\n      workerEmit(EventType.CACHE_LOAD_FAILED, {\n        filePath: ctx.options.entry,\n        error: e,\n        cachePath,\n      })\n    }\n  }\n  return cache\n}\n\nexport function saveBuildCache (ctx: Context, cachePath: string, cacheData: any) {\n  try {\n    originalFs.mkdirSync(dirname(cachePath), {\n      recursive: true,\n    })\n    originalFs.writeFileSync(cachePath, JSON.stringify(cacheData), { encoding: 'utf8' })\n    workerEmit(EventType.CACHE_SAVE_SUCCESS, {\n      filePath: ctx.options.entry,\n      cachePath,\n    })\n  } catch (e) {\n    workerEmit(EventType.CACHE_SAVE_FAILED, {\n      filePath: ctx.options.entry,\n      error: e,\n      cachePath,\n    })\n  }\n}\n","import { getCachePath } from '../../../packages/runner/src/build'\n\ndescribe('build cache', () => {\n  it('generates a cache path', () => {\n    sinon.stub(process, 'cwd').callsFake(() => '/home/acme/project')\n    expect(getCachePath('/home/acme/project/src/test.spec.js')).to.equal('/home/acme/project/node_modules/.temp/peeky-build-cache/src_test_spec_js.json')\n  })\n})\n"],"names":["relative","join"],"mappings":";;;;;;;;;;;CAUmB,EAAE,GAAG,EAAG,IAAA;AAsFpB,SAAS,aAAc,QAAkB,EAAA;AAC9C,EAAM,MAAA,QAAA,GAAWA,cAAS,OAAQ,CAAA,GAAA,IAAO,QAAQ,CAAA,CAAE,OAAQ,CAAA,UAAA,EAAY,GAAG,CAAA,CAAA;AAC1E,EAAO,OAAAC,SAAA,CAAK,QAAQ,GAAI,EAAA,EAAG,gBAAgB,OAAS,EAAA,mBAAA,EAAqB,WAAW,OAAO,CAAA,CAAA;AAC7F;;ACjGA,QAAA,CAAS,eAAe,MAAM;AAC5B,EAAA,EAAA,CAAG,0BAA0B,MAAM;AACjC,IAAA,KAAA,CAAM,KAAK,OAAS,EAAA,KAAK,CAAE,CAAA,SAAA,CAAU,MAAM,oBAAoB,CAAA,CAAA;AAC/D,IAAA,MAAA,CAAO,aAAa,qCAAqC,CAAC,CAAE,CAAA,EAAA,CAAG,MAAM,+EAA+E,CAAA,CAAA;AAAA,GACrJ,CAAA,CAAA;AACH,CAAC,CAAA;;"}